<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 世情如紙</title>
    <link>https://blogger.tigernaxo.com/categories/javascript/</link>
    <description>Recent content in JavaScript on 世情如紙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 27 Oct 2021 14:03:00 +0800</lastBuildDate><atom:link href="https://blogger.tigernaxo.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[JavaScritpt] 用 Typescript 建後簡易前端 Router</title>
      <link>https://blogger.tigernaxo.com/post/javascript/diy/router/</link>
      <pubDate>Wed, 27 Oct 2021 14:03:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/diy/router/</guid>
      <description>起始一個使用 vallina-ts 的 vite 專案並安裝套件，並使用 bootstrap 做簡單的 css 套用： 1 2 3 4 5 6 npm init vite@latest route-test #依序選擇 vallina-&amp;gt;vallina-ts cd route-test npm i # 安裝套件 npm i bootstrap # 安裝 bootstrap 在 index.html 新增元素 app 1 2</description>
    </item>
    
    <item>
      <title>[JavaScritpt] 提升(Hoisting)與暫時性死區(Temporal Dead Zone)</title>
      <link>https://blogger.tigernaxo.com/post/javascript/hoisting/</link>
      <pubDate>Sat, 09 Jan 2021 01:31:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/hoisting/</guid>
      <description>網路上時常見到充滿 function 與 var 的 JavaScript 求值題目， 筆者在釐清 Hoisting 和 TDZ 的觀念前時常覺得答案出乎意料， 雖然現在撰寫程式碼都已經避免使用 var，但是維護 legacy code 還是</description>
    </item>
    
    <item>
      <title>[JavaScript] 各種模組(module)</title>
      <link>https://blogger.tigernaxo.com/post/javascript/module/</link>
      <pubDate>Thu, 12 Nov 2020 05:41:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/module/</guid>
      <description>JS模組規範有很多：AMD、UMD、CMD、commonJS、ES6 module Reference JS模組規範：AMD、UMD、CMD、commonJS、ES6 module</description>
    </item>
    
    <item>
      <title>[JavaScript] 複製元件內的文字</title>
      <link>https://blogger.tigernaxo.com/post/javascript/copy_text/</link>
      <pubDate>Thu, 12 Nov 2020 05:41:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/copy_text/</guid>
      <description>要在前端用 JavaScript 將 DOM 的內容複製到剪貼簿有幾種姿勢： Clipboard API 基本上目前(2020年底)，主流瀏覽器近期版本都支援了，如果不考慮 IE 的話倒是可以使用，語法</description>
    </item>
    
    <item>
      <title>[JavaScript] Object 常用方法</title>
      <link>https://blogger.tigernaxo.com/post/javascript/object_functions/</link>
      <pubDate>Wed, 20 May 2020 23:31:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/object_functions/</guid>
      <description>紀錄常用的 Object 方法，細節可以到MDN看 Object.create Object.create(proto, [propertiesObject]) 以傳入的參數作為prototype建立一個新物件，這個方法只能複製只帶有 primitive type 無法 deep copy，建立的</description>
    </item>
    
    <item>
      <title>[JavaScript] JavaScript 當中的原型繼承鏈模型</title>
      <link>https://blogger.tigernaxo.com/post/javascript/prototype/</link>
      <pubDate>Wed, 20 May 2020 09:37:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/prototype/</guid>
      <description>基於原型 (Prototype-Based) 的 JavaScript 一般物件導向式(OOP; Object Oriented Programming) 程式語言 (如：java、c++、c#) 當中的物件是由類別模板 (class) 產生實體物件 (instance)，</description>
    </item>
    
    <item>
      <title>[JavaScript] Array 常用方法</title>
      <link>https://blogger.tigernaxo.com/post/javascript/array_functions/</link>
      <pubDate>Wed, 29 Apr 2020 23:31:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/array_functions/</guid>
      <description>紀錄常用的 Array 方法，細節可以到MDN看 陣列操作 尾端彈出 Array.prototype.pop()、推入 Array.prototype.push() arr.pop() arr.push(element1[, &amp;hellip;[, elementN]]) 1 2 3 4 5 const arr=[1, 2, 3, 4] arr.pop() console.log(arr) // [1, 2,</description>
    </item>
    
  </channel>
</rss>
