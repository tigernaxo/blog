<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 世情如紙</title>
    <link>https://blogger.tigernaxo.com/post/</link>
    <description>Recent content in Posts on 世情如紙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 24 Jul 2021 07:32:00 +0800</lastBuildDate><atom:link href="https://blogger.tigernaxo.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Vue] An Example of Dialog component that returns Promise</title>
      <link>https://blogger.tigernaxo.com/post/vue/vue2/promise_component_en/</link>
      <pubDate>Sat, 24 Jul 2021 07:32:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/vue/vue2/promise_component_en/</guid>
      <description>Usage: call getConfirm() with the outter vue component, due to getConfirm return a Promise, you can perform operations such as await value. Principle: Use watcher and Promise to achieve the effect. reference vue vm-watch api Application: in Vue-router&amp;rsquo;s component route guard , prompt checkbox before user leaving the page view Execute Test Code 1 2 3 4 5 6 7 8 9 &amp;lt;button id=&amp;#34;xBtn&amp;#34;&amp;gt;Execute Test&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;xApp&amp;#34; class=&amp;#34;modal&amp;#34; :style=&amp;#34;{display: dialog?&amp;#39;block&amp;#39;:&amp;#39;none&amp;#39;}&amp;#34;&amp;gt;</description>
    </item>
    
    <item>
      <title>[Vue] 回傳 Promise 的Dialog 元件範例</title>
      <link>https://blogger.tigernaxo.com/post/vue/vue2/promise_component/</link>
      <pubDate>Sat, 24 Jul 2021 07:32:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/vue/vue2/promise_component/</guid>
      <description>用法：以外部的元件呼叫視窗元件 getConfirm() 方法，因為 getConfirm 為 Promise 所以可以進行 await 取值等等操作 。 原理：利用 watcher 和 Promise 達成效果。參考 vue vm-watch api 應用：Vue router 的 component route guar</description>
    </item>
    
    <item>
      <title>[System] 多層式架構(Multitier Architecture)</title>
      <link>https://blogger.tigernaxo.com/post/system/n_tier/</link>
      <pubDate>Mon, 17 May 2021 23:20:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/system/n_tier/</guid>
      <description>多層式架構 Multitier Architecture 或稱 N-Tier Architecture， 是 Client–server architecture 的一種， 多層架構的層可以是 layer 或 tier，這兩者之間主要的差別在於</description>
    </item>
    
    <item>
      <title>[Tools] 10分鐘建造 proxy 克服跨網域資源存取(CORS)問題</title>
      <link>https://blogger.tigernaxo.com/post/tools/proxy/http-proxy-middleware/</link>
      <pubDate>Sat, 20 Mar 2021 08:45:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/tools/proxy/http-proxy-middleware/</guid>
      <description>前後端分離的開發環境以 Ajax 呼叫資源時時會遇到跨網域存取的問題， 一些比較全面的開發環境像是 webpack、vue-cli 等等通常提供內建開發代理</description>
    </item>
    
    <item>
      <title>[.NET Core] 不阻塞的非同步控制器(Non-Blocking Asynchronous Controllers)</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/async/async_controller/</link>
      <pubDate>Wed, 17 Mar 2021 03:32:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/async/async_controller/</guid>
      <description>ASP .NET Core 當中的 Web 控制器屬於IO密集的應用程式，當中主要使用的 TAP 是一種簡易使用、語言層級的非同步設計模式。 透過 TAP 可設計出非同步(Asynchro</description>
    </item>
    
    <item>
      <title>[Tools] 在 linux 中使用 google drive cli</title>
      <link>https://blogger.tigernaxo.com/post/tools/gdrive/</link>
      <pubDate>Fri, 29 Jan 2021 23:46:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/tools/gdrive/</guid>
      <description>重新編譯 gdrive 取得憑證 首先到Google API Console， 建立專案 啟動 Google Drive API。 啟用之後選擇左邊的&amp;quot;設定同意畫面&amp;quot;，填寫必</description>
    </item>
    
    <item>
      <title>[JavaScritpt] 提升(Hoisting)與暫時性死區(Temporal Dead Zone)</title>
      <link>https://blogger.tigernaxo.com/post/javascript/hoisting/</link>
      <pubDate>Sat, 09 Jan 2021 01:31:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/hoisting/</guid>
      <description>網路上時常見到充滿 function 與 var 的 JavaScript 求值題目， 筆者在釐清 Hoisting 和 TDZ 的觀念前時常覺得答案出乎意料， 雖然現在撰寫程式碼都已經避免使用 var，但是維護 legacy code 還是</description>
    </item>
    
    <item>
      <title>[.NET Core] ASP .NET Core 3.1 驗證與授權(三)-Cookie 驗證實例</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/auth/auth_guild_3/</link>
      <pubDate>Wed, 30 Dec 2020 23:24:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/auth/auth_guild_3/</guid>
      <description>前兩篇介紹了驗證、授權在 .NET Core 當中的基本的概念，本節實作 Cookie 驗證的設定、簽發、登出&amp;hellip; Configuration 在 Startup.ConfigureServices 方法中設置驗證方案， 並且可以在 AddCookie 當中設置</description>
    </item>
    
    <item>
      <title>[.NET Core] ASP .NET Core 3.1 驗證與授權(二)-驗證設定</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/auth/auth_guild_2/</link>
      <pubDate>Mon, 23 Nov 2020 15:46:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/auth/auth_guild_2/</guid>
      <description>驗證方案(Authentication Scheme) 驗證方案包含兩個部分： 驗證處理函式(Authentication handler)，可能是 IAuthenticationHandler 或 AuthenticationHandler 的實作</description>
    </item>
    
    <item>
      <title>[.NET Core] ASP .NET Core 3.1 驗證與授權(一)-驗證與授權</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/auth/auth_guild_1/</link>
      <pubDate>Mon, 23 Nov 2020 08:39:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/auth/auth_guild_1/</guid>
      <description>在進入 ASP .NET Core 3.1 中驗證(Authentication)與授權(Authorization)的作用流程前，應當對兩者有抽象概念上的認識，以及了解</description>
    </item>
    
    <item>
      <title>[Linux] 在 Ubuntu 20.04 中設置 vim plugin YouCompleteMe</title>
      <link>https://blogger.tigernaxo.com/post/tools/vim/plugin_ycm/</link>
      <pubDate>Wed, 18 Nov 2020 23:14:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/tools/vim/plugin_ycm/</guid>
      <description>安裝 junegunn/vim-plug 管理套件 以指令安裝 junegunn/vim-plug 1 2 curl -fLo ~/.vim/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 在 ~/.vimrc 加入 Plug &amp;lsquo;ycm-core/YouCompleteMe&amp;rsquo; 1 2 3 4 5 6 7 &amp;#34; Specify a directory for plugins call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;) Plug &amp;#39;ycm-core/YouCompleteMe&amp;#39; &amp;#34; Initialize plugin system call plug#end() 打開 vim，在 vim 命令列輸入安裝 Plugin 的指令下</description>
    </item>
    
    <item>
      <title>[JavaScript] 各種模組(module)</title>
      <link>https://blogger.tigernaxo.com/post/javascript/module/</link>
      <pubDate>Thu, 12 Nov 2020 05:41:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/module/</guid>
      <description>JS模組規範有很多：AMD、UMD、CMD、commonJS、ES6 module Reference JS模組規範：AMD、UMD、CMD、commonJS、ES6 module</description>
    </item>
    
    <item>
      <title>[JavaScript] 複製元件內的文字</title>
      <link>https://blogger.tigernaxo.com/post/javascript/copy_text/</link>
      <pubDate>Thu, 12 Nov 2020 05:41:00 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/copy_text/</guid>
      <description>要在前端用 JavaScript 將 DOM 的內容複製到剪貼簿有幾種姿勢： Clipboard API 基本上目前(2020年底)，主流瀏覽器近期版本都支援了，如果不考慮 IE 的話倒是可以使用，語法</description>
    </item>
    
    <item>
      <title>[SignalR] Websocket 即時聊天程式(四) - 前端登入頁面</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_4_front_end_login/</link>
      <pubDate>Tue, 10 Nov 2020 02:45:45 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_4_front_end_login/</guid>
      <description>安裝 axios SignalR 連線驗證的方式是將 token 夾帶於網址參數中發送到伺服器，因此進行 websocket 連線前我們透過 ajax 向伺服器發送帳號密碼索取登入的 Token，我們安裝方便使</description>
    </item>
    
    <item>
      <title>[SignalR] Websocket 即時聊天程式(三) - 後端 Token 認證</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_3_validate_token/</link>
      <pubDate>Sat, 07 Nov 2020 15:09:45 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_3_validate_token/</guid>
      <description>安裝套件 要進行 Token 的認證，需要先安裝 Microsoft.AspNetCore.Authentication.JwtBearer 套件： 1 dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer 註冊認證服務 新增一個檔案 DependencyInjection.cs，在當中製作 IServiceCollection 的擴充</description>
    </item>
    
    <item>
      <title>[SignalR] Websocket 即時聊天程式(二) - 後端 Token 授權</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_2_issue_token/</link>
      <pubDate>Fri, 06 Nov 2020 21:09:45 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_2_issue_token/</guid>
      <description>SignalR驗證方式 SignalR 的授權可以選擇使用 Cookie 或 Bearer Token： Cookie: 驗證方法與一般網頁別無二致，較容易實作但缺點是只能用於瀏覽器(browser-</description>
    </item>
    
    <item>
      <title>[SignalR] Websocket 即時聊天程式(一) - 建立專案</title>
      <link>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_1_start/</link>
      <pubDate>Sat, 31 Oct 2020 02:09:45 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/dotnetcore31/signalr/guild_1_start/</guid>
      <description>這個系列會官方文件為主，保留必要的部分，並視情況修改部份程式、添加說明文字。 建立 SignalR 專案 這個範例設定用靜態 html 做前端，這樣之後要做前後端分離也更</description>
    </item>
    
    <item>
      <title>[Linux] CentOS 8 設定網路靜態IP</title>
      <link>https://blogger.tigernaxo.com/post/linux/centos8/static_ip/</link>
      <pubDate>Tue, 16 Jun 2020 09:37:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/linux/centos8/static_ip/</guid>
      <description>查詢IP 1 2 3 4 5 6 7 8 9 10 11 12 13 $ ip a 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:85:fe:50 brd ff:ff:ff:ff:ff:ff inet</description>
    </item>
    
    <item>
      <title>[Linux] Ubuntu 20.4 以 netplan 設定網路靜態IP</title>
      <link>https://blogger.tigernaxo.com/post/linux/ubuntu204/static_ip/</link>
      <pubDate>Sat, 13 Jun 2020 09:37:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/linux/ubuntu204/static_ip/</guid>
      <description>Ubuntu 自 17.10 以後就可以用 netplan 設置網卡~ 檢查網路介面 以 ip a 可以看到我的 ubuntu 有2個網路介面分別是 lo、enp0s3，對應到 loopback、有線網卡 1 2 3</description>
    </item>
    
    <item>
      <title>[JavaScript] Object 常用方法</title>
      <link>https://blogger.tigernaxo.com/post/javascript/object_functions/</link>
      <pubDate>Wed, 20 May 2020 23:31:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/object_functions/</guid>
      <description>紀錄常用的 Object 方法，細節可以到MDN看 Object.create Object.create(proto, [propertiesObject]) 以傳入的參數作為prototype建立一個新物件，這個方法只能複製只帶有 primitive type 無法 deep copy，建立的</description>
    </item>
    
    <item>
      <title>[JavaScript] JavaScript 當中的原型繼承鏈模型</title>
      <link>https://blogger.tigernaxo.com/post/javascript/prototype/</link>
      <pubDate>Wed, 20 May 2020 09:37:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/prototype/</guid>
      <description>基於原型 (Prototype-Based) 的 JavaScript 一般物件導向式(OOP; Object Oriented Programming) 程式語言 (如：java、c++、c#) 當中的物件是由類別模板 (class) 產生實體物件 (instance)，</description>
    </item>
    
    <item>
      <title>[JavaScript] Array 常用方法</title>
      <link>https://blogger.tigernaxo.com/post/javascript/array_functions/</link>
      <pubDate>Wed, 29 Apr 2020 23:31:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/javascript/array_functions/</guid>
      <description>紀錄常用的 Array 方法，細節可以到MDN看 陣列操作 尾端彈出 Array.prototype.pop()、推入 Array.prototype.push() arr.pop() arr.push(element1[, &amp;hellip;[, elementN]]) 1 2 3 4 5 const arr=[1, 2, 3, 4] arr.pop() console.log(arr) // [1, 2,</description>
    </item>
    
    <item>
      <title>[台灣杉] 一鍵登入國網中心台灣杉(Taiwania)</title>
      <link>https://blogger.tigernaxo.com/post/biotech/taiwania_login_oneclick/</link>
      <pubDate>Wed, 23 Jan 2019 09:37:18 +0800</pubDate>
      
      <guid>https://blogger.tigernaxo.com/post/biotech/taiwania_login_oneclick/</guid>
      <description>台灣杉(Taiwania)是國網中心2018年啟用的超級電腦，登入時密碼必須附加OTP (One-time Password)，國網中心建議取得OTP的方式是從</description>
    </item>
    
  </channel>
</rss>
